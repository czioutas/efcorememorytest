// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using efcorememorytest.Data;
using efcorememorytest.Entities;

namespace efcorememorytest.Migrations
{
    [DbContext(typeof(ProjectDbContext))]
    [Migration("20200531061228_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("efcorememorytest.Entities.Nested1TestModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.HasKey("Id");

                    b.ToTable("Nested1TestModel");
                });

            modelBuilder.Entity("efcorememorytest.Entities.Nested2TestModel", b =>
                {
                    b.Property<string>("A")
                        .HasColumnType("text");

                    b.ToTable("Nested2TestModel");
                });

            modelBuilder.Entity("efcorememorytest.Entities.Nested3TestModel", b =>
                {
                    b.Property<string>("A")
                        .HasColumnType("text");

                    b.ToTable("Nested3TestModel");
                });

            modelBuilder.Entity("efcorememorytest.Entities.Nested4TestModel", b =>
                {
                    b.Property<string>("A")
                        .HasColumnType("text");

                    b.ToTable("Nested4TestModel");
                });

            modelBuilder.Entity("efcorememorytest.Entities.Nested5TestModel", b =>
                {
                    b.Property<string>("A")
                        .HasColumnType("text");

                    b.ToTable("Nested5TestModel");
                });

            modelBuilder.Entity("efcorememorytest.Entities.Nested6TestModel", b =>
                {
                    b.Property<string>("A")
                        .HasColumnType("text");

                    b.Property<IEnumerable<SubNested6TestModel1>>("SubNested6TestModel1")
                        .HasColumnType("jsonb");

                    b.ToTable("Nested6TestModel");
                });

            modelBuilder.Entity("efcorememorytest.Entities.TestModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("A")
                        .HasColumnType("text");

                    b.Property<string>("AA")
                        .HasColumnType("text");

                    b.Property<string>("AAA")
                        .HasColumnType("text");

                    b.Property<string>("AAAA")
                        .HasColumnType("text");

                    b.Property<string>("AAAAA")
                        .HasColumnType("text");

                    b.Property<string>("AAAAAA")
                        .HasColumnType("text");

                    b.Property<bool?>("BoolA")
                        .HasColumnType("boolean");

                    b.Property<bool?>("BoolAA")
                        .HasColumnType("boolean");

                    b.Property<bool?>("BoolAAA")
                        .HasColumnType("boolean");

                    b.Property<bool?>("BoolAAAA")
                        .HasColumnType("boolean");

                    b.Property<bool?>("BoolB")
                        .HasColumnType("boolean");

                    b.Property<IEnumerable<short>>("IEnumerableShortJsonB")
                        .HasColumnType("jsonb");

                    b.Property<IEnumerable<short>>("IEnumerableShortJsonBB")
                        .HasColumnType("jsonb");

                    b.Property<long?>("Nested1TestModelId")
                        .HasColumnType("bigint");

                    b.Property<IEnumerable<Nested2TestModel>>("Nested2TestModel")
                        .HasColumnType("jsonb");

                    b.Property<IEnumerable<Nested3TestModel>>("Nested3TestModel")
                        .HasColumnType("jsonb");

                    b.Property<IEnumerable<Nested4TestModel>>("Nested4TestModel")
                        .HasColumnType("jsonb");

                    b.Property<IEnumerable<Nested5TestModel>>("Nested5TestModel")
                        .HasColumnType("jsonb");

                    b.Property<IEnumerable<Nested6TestModel>>("Nested6TestModel")
                        .HasColumnType("jsonb");

                    b.Property<long>("Num1")
                        .HasColumnType("bigint");

                    b.Property<long>("Num2")
                        .HasColumnType("bigint");

                    b.Property<long>("Num3")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset?>("ValidToA")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ValidToAA")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ValidToAAA")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ValidToAAAA")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ValidToAAAAA")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ValidToAAAAAA")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Nested1TestModelId");

                    b.ToTable("TestModels");
                });

            modelBuilder.Entity("efcorememorytest.Entities.TestModel", b =>
                {
                    b.HasOne("efcorememorytest.Entities.Nested1TestModel", "Nested1TestModel")
                        .WithMany()
                        .HasForeignKey("Nested1TestModelId");
                });
#pragma warning restore 612, 618
        }
    }
}
